@startuml Projet 1 - UML (Updated)

skinparam class AttributeIconSize 0

abstract class MathFunction {
  - name: str
  - description: str
  - details: str
  - parameters: List<RealParameter>
  --
  + MathFunction(name: str, details: str, description: str)
  {abstract} + process(x: number): number
  --
  + {property} name: str {readOnly}
  + {property} description: str {readOnly}
  + {property} details: str {readOnly}
}



abstract class TrigFunction {
  {static} + trig_name: str
  {static} + param_specs: (symbol, name, desc, min, max, default)[]
  {static} + param_order: str[]
  --
  + TrigFunction(name: str, details: str, description: str)
  + get_param(param_symbol: str): RealParameter
  + process(x: number): number
  --
  .. Formula ..
  f(x) = a * trg(f * x + p) + o
}

MathFunction <|-- TrigFunction



class SineFunction {
  {static} + trig_name = "sin"
  + SineFunction()
}
TrigFunction <|-- SineFunction



class BaseExpoFunction {
  {static} + param_specs: (symbol, name, desc, min, max, default)[]
  {static} + param_order: str[]
  --
  + ExpoFunction(name: str, details: str, description: str)
  + get_param(param_symbol: str): RealParameter
  {abstract} + process(x: number): number
}
MathFunction <|-- BaseExpoFunction



class ExpoFunction {
  + ExpoFunction()
  + process(x: number): number
}
BaseExpoFunction <|-- ExpoFunction



class PolyFunction {
  - _n: IntParameter
  - _a: List<RealParameter>
  --
  + PolyFunction(name: str, details: str, description: str)
  + _update_coeffs(): void
  + get_param(param_symbol: str): RealParameter | IntParameter
  + process(x: number): number
}
MathFunction <|-- PolyFunction



class QuadFunction {
  + QuadFunction()
}
PolyFunction <|-- QuadFunction



class RealParameter {
  - name: str
  - symbol: str
  - description: str
  - min_value: float
  - max_value: float
  - default_value: float
  - value: float
  --
  + RealParameter(symbol: str, name: str, description: str,
                  min_value: float, max_value: float, default_value: float)
  + set_default_values(): void
  + getters/setters
}
MathFunction *-right- "0..*" RealParameter : parameters



class IntParameters {
  - name: str
  - symbol: str
  - description: str
  - min_value: int
  - max_value: int
  - default_value: int
  - value: int
  --
  + IntParameter(symbol: str, name: str, description: str,
                 min_value: int, max_value: int, default_value: int)
  + set_default_values(): void
  + getters/setters
}



abstract class NumericalTechniques {
}



class IntegralNumerical {
}
NumericalTechniques <|-- IntegralNumerical



class DerivativeNumerical {
}
NumericalTechniques <|-- DerivativeNumerical
NumericalTechniques *-left- RealParameter
MathFunction *-left- IntParameters
NumericalTechniques *-- IntParameters














@enduml